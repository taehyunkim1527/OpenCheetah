Using Eigen for Matmul
Doing BaseOT ...
using silent ot pack
using silent ot pack
using silent ot pack
using silent ot pack
After one-time setup, communication
Thread i = 0, total data sent till now = 1997740
Thread i = 1, total data sent till now = 1726247
Thread i = 2, total data sent till now = 1726247
Thread i = 3, total data sent till now = 1726247
-----------Syncronizing-----------
secret_share_mod: 137438953472 bitlength: 37
backend: Ring-SilentOT-Cheetah
-----------Syncronized - now starting execution-----------
HomBN #1 via element-wise mult on 384 points
[31m4 ==> 0[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Time in sec for current matmul = 0.118
512 => 0
[31mMatMul Output Mismatch[0m
Relu #1 on 128 points, truncate=1 by 12 bits
Time in sec for current relu = 0.703
Truncate #1 on 384 points by 12 bits
HomBN #2 via element-wise mult on 384 points
[31m2 ==> -26693270732[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #2 on 128 points by 12 bits
Time in sec for current matmul = 0.12
29154818 => 8628661448
[31mMatMul Output Mismatch[0m
Relu #3 on 128 points, truncate=1 by 12 bits
Time in sec for current relu = 0.703
Truncate #3 on 384 points by 12 bits
HomBN #3 via element-wise mult on 384 points
[31m2 ==> -35283205324[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #4 on 128 points by 12 bits
Time in sec for current matmul = 0.119
-98972458 => 38411339278
[31mMatMul Output Mismatch[0m
Relu #5 on 128 points, truncate=1 by 12 bits
Time in sec for current relu = 0.703
Truncate #5 on 384 points by 12 bits
HomBN #4 via element-wise mult on 384 points
[31m2 ==> 47998894900[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #6 on 128 points by 12 bits
Time in sec for current matmul = 0.119
406079088 => -31241526200
[31mMatMul Output Mismatch[0m
Relu #7 on 128 points, truncate=1 by 12 bits
Time in sec for current relu = 0.703
Truncate #7 on 384 points by 12 bits
HomBN #5 via element-wise mult on 384 points
[31m2 ==> 65581417268[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #8 on 128 points by 12 bits
Time in sec for current matmul = 0.118
358833152 => 28173253220
[31mMatMul Output Mismatch[0m
Relu #9 on 128 points, truncate=1 by 12 bits
Time in sec for current relu = 0.703
Thread i = 0, total data sent till now = 3565234
Thread i = 1, total data sent till now = 1757747
Thread i = 2, total data sent till now = 1733011
Thread i = 3, total data sent till now = 1757747
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Total time taken = 10651565 microseconds.
Total data sent = 1.56141 MiB.
Number of rounds = 195
Total comm (sent+received) = (see SERVER OUTPUT)
------------------------------------------------------
Total time in Conv = 0 seconds.
Total time in MatMul = 0.594 seconds.
Total time in BatchNorm = 0.647 seconds.
Total time in Truncation = 5.831 seconds.
Total time in Relu = 3.515 seconds.
Total time in MaxPool = 0 seconds.
Total time in AvgPool = 0 seconds.
Total time in ArgMax = 0 seconds.
Total time in MatAdd = 0 seconds.
Total time in MatAddBroadCast = 0 seconds.
Total time in MulCir = 0 seconds.
Total time in ScalarMul = 0 seconds.
Total time in Sigmoid = 0 seconds.
Total time in Tanh = 0 seconds.
Total time in Sqrt = 0 seconds.
Total time in NormaliseL2 = 0 seconds.
------------------------------------------------------
Conv data sent = 0 MiB.
MatMul data sent = 0.595382 MiB.
BatchNorm data sent = 0.893046 MiB.
Truncation data sent = 0.0549011 MiB.
Relu data sent = 0.0180817 MiB.
Maxpool data sent = 0 MiB.
Avgpool data sent = 0 MiB.
ArgMax data sent = 0 MiB.
MatAdd data sent = 0 MiB.
MatAddBroadCast data sent = 0 MiB.
MulCir data sent = 0 MiB.
Sigmoid data sent = 0 MiB.
Tanh data sent = 0 MiB.
Sqrt data sent = 0 MiB.
NormaliseL2 data sent = 0 MiB.
------------------------------------------------------
6878237
6878236
6878237
6878237
6878237
6878236
6878237
6878237
6878237
6878237
6878237
6878237
6878236
6878237
6878237
6878237
6878237
6878236
6878237
6878237
6878236
6878237
6878236
6878237
6878236
6878236
6878237
6878237
6878237
6878237
6878237
6878237
6878236
6878237
6878237
6878236
6878237
6878236
6878236
6878237
6878237
6878237
6878237
6878237
6878237
6878237
6878237
6878237
6878236
6878237
6878236
6878236
6878237
6878237
6878237
6878237
6878237
6878236
6878237
6878237
6878237
6878236
6878237
6878236
6878237
6878237
6878236
6878237
6878236
6878237
6878237
6878237
6878237
6878236
6878237
6878237
6878236
6878236
6878237
6878237
6878237
6878237
6878237
6878237
6878237
6878237
6878237
6878237
6878236
6878236
6878237
6878237
6878237
6878237
6878237
6878237
6878237
6878237
6878237
6878237
6878236
6878237
6878237
6878237
6878236
6878236
6878237
6878236
6878237
6878237
6878236
6878237
6878237
6878237
6878236
6878237
6878236
6878237
6878236
6878237
6878237
6878237
6878237
6878236
6878236
6878236
6878237
6878237
