Using Eigen for Matmul
Doing BaseOT ...
using silent ot pack
using silent ot pack
using silent ot pack
using silent ot pack
After one-time setup, communication
Thread i = 0, total data sent till now = 1997751
Thread i = 1, total data sent till now = 1726247
Thread i = 2, total data sent till now = 1726247
Thread i = 3, total data sent till now = 1726247
-----------Syncronizing-----------
secret_share_mod: 137438953472 bitlength: 37
backend: Ring-SilentOT-Cheetah
-----------Syncronized - now starting execution-----------
HomBN #1 via element-wise mult on 1536 points
[31m4 ==> 0[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Time in sec for current matmul = 0.205
2048 => 0
[31mMatMul Output Mismatch[0m
Relu #1 on 512 points, truncate=1 by 12 bits
Time in sec for current relu = 0.706
Truncate #1 on 1536 points by 12 bits
HomBN #2 via element-wise mult on 1536 points
[31m2 ==> -38781787834[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #2 on 512 points by 12 bits
Time in sec for current matmul = 0.214
332186772 => -68181564709
[31mMatMul Output Mismatch[0m
Relu #3 on 512 points, truncate=1 by 12 bits
Time in sec for current relu = 0.706
Time in sec for current matmul = 0.212
-1024 => -60550874402
[31mMatMul Output Mismatch[0m
Relu #5 on 512 points, truncate=1 by 12 bits
Time in sec for current relu = 0.705
Truncate #3 on 1536 points by 12 bits
HomBN #3 via element-wise mult on 1536 points
[31m2 ==> 57519432006[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #4 on 512 points by 12 bits
Time in sec for current matmul = 0.216
197541008 => -42204108714
[31mMatMul Output Mismatch[0m
Relu #7 on 512 points, truncate=1 by 12 bits
Time in sec for current relu = 0.705
Time in sec for current matmul = 0.215
-1024 => 50905356085
[31mMatMul Output Mismatch[0m
Relu #9 on 512 points, truncate=1 by 12 bits
Time in sec for current relu = 0.705
Truncate #5 on 1536 points by 12 bits
HomBN #4 via element-wise mult on 1536 points
[31m2 ==> 46782013766[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #6 on 512 points by 12 bits
Time in sec for current matmul = 0.214
-40318358 => -48585012612
[31mMatMul Output Mismatch[0m
Relu #11 on 512 points, truncate=1 by 12 bits
Time in sec for current relu = 0.705
Time in sec for current matmul = 0.211
-1024 => 50036966528
[31mMatMul Output Mismatch[0m
Relu #13 on 512 points, truncate=1 by 12 bits
Time in sec for current relu = 0.705
Thread i = 0, total data sent till now = 6267581
Thread i = 1, total data sent till now = 1838535
Thread i = 2, total data sent till now = 1751351
Thread i = 3, total data sent till now = 1838535
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Total time taken = 13903993 microseconds.
Total data sent = 4.31014 MiB.
Number of rounds = 205
Total comm (sent+received) = (see SERVER OUTPUT)
------------------------------------------------------
Total time in Conv = 0 seconds.
Total time in MatMul = 1.487 seconds.
Total time in BatchNorm = 0.522 seconds.
Total time in Truncation = 5.053 seconds.
Total time in Relu = 4.937 seconds.
Total time in MaxPool = 0 seconds.
Total time in AvgPool = 0 seconds.
Total time in ArgMax = 0 seconds.
Total time in MatAdd = 0 seconds.
Total time in MatAddBroadCast = 0 seconds.
Total time in MulCir = 0 seconds.
Total time in ScalarMul = 0 seconds.
Total time in Sigmoid = 0 seconds.
Total time in Tanh = 0 seconds.
Total time in Sqrt = 0 seconds.
Total time in NormaliseL2 = 0 seconds.
------------------------------------------------------
Conv data sent = 0 MiB.
MatMul data sent = 3.33372 MiB.
BatchNorm data sent = 0.714367 MiB.
Truncation data sent = 0.164001 MiB.
Relu data sent = 0.098053 MiB.
Maxpool data sent = 0 MiB.
Avgpool data sent = 0 MiB.
ArgMax data sent = 0 MiB.
MatAdd data sent = 0 MiB.
MatAddBroadCast data sent = 0 MiB.
MulCir data sent = 0 MiB.
Sigmoid data sent = 0 MiB.
Tanh data sent = 0 MiB.
Sqrt data sent = 0 MiB.
NormaliseL2 data sent = 0 MiB.
------------------------------------------------------
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216057
12216057
12216058
12216058
12216057
12216057
12216058
12216057
12216057
12216058
12216058
12216058
12216057
12216057
12216057
12216058
12216057
12216057
12216057
12216058
12216057
12216057
12216058
12216057
12216058
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216057
12216058
12216057
12216057
12216057
12216057
12216058
12216057
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216057
12216057
12216058
12216057
12216057
12216058
12216058
12216058
12216057
12216057
12216057
12216057
12216058
12216058
12216058
12216057
12216058
12216057
12216057
12216058
12216057
12216058
12216057
12216057
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216058
12216058
12216057
12216058
12216058
12216057
12216058
12216057
12216057
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216057
12216057
12216058
12216057
12216058
12216057
12216057
12216057
12216058
12216058
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216058
12216057
12216057
12216057
12216058
12216057
12216057
12216057
12216057
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216058
12216058
12216057
12216057
12216057
12216057
12216058
12216057
12216057
12216057
12216058
12216057
12216057
12216057
12216058
12216057
12216058
12216058
12216057
12216058
12216058
12216058
12216057
12216057
12216058
12216058
12216057
12216057
12216058
12216057
12216057
12216057
12216057
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216058
12216057
12216058
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216058
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216058
12216057
12216057
12216057
12216058
12216057
12216057
12216057
12216058
12216057
12216058
12216057
12216058
12216058
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216057
12216058
12216057
12216057
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216058
12216057
12216058
12216058
12216057
12216058
12216058
12216057
12216057
12216057
12216057
12216058
12216057
12216058
12216057
12216058
12216057
12216057
12216058
12216058
12216057
12216058
12216057
12216058
12216057
12216057
12216058
12216057
12216058
12216057
12216057
12216057
12216058
12216057
12216058
12216057
12216057
12216057
12216057
12216058
12216057
12216057
12216058
12216058
12216058
12216057
12216058
12216058
12216057
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216057
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216058
12216057
12216057
12216057
12216057
12216058
12216057
12216057
12216057
12216058
12216058
12216057
12216058
12216057
12216057
12216057
12216058
12216057
12216057
12216058
12216058
12216057
12216057
12216057
12216057
12216058
12216058
12216057
12216058
12216057
12216057
12216058
12216057
12216058
12216058
12216057
12216057
12216058
12216057
12216057
12216057
12216057
12216058
12216057
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216058
12216058
12216057
12216057
12216057
12216057
12216058
12216058
12216057
12216058
12216057
12216058
12216057
12216057
12216057
12216057
12216057
12216057
12216058
12216057
12216057
12216058
12216058
12216057
12216057
12216057
12216058
12216057
12216057
12216057
12216057
12216057
