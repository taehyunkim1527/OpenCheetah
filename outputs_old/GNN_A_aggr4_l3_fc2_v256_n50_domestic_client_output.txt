Using Eigen for Matmul
Doing BaseOT ...
using silent ot pack
using silent ot pack
using silent ot pack
using silent ot pack
After one-time setup, communication
Thread i = 0, total data sent till now = 1997798
Thread i = 1, total data sent till now = 1726247
Thread i = 2, total data sent till now = 1726247
Thread i = 3, total data sent till now = 1726247
-----------Syncronizing-----------
secret_share_mod: 137438953472 bitlength: 37
backend: Ring-SilentOT-Cheetah
-----------Syncronized - now starting execution-----------
HomBN #1 via element-wise mult on 12800 points
[31m4 ==> 0[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Time in sec for current matmul = 0.046
1024 => 0
[31mMatMul Output Mismatch[0m
Relu #1 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.144
Truncate #1 on 12800 points by 12 bits
HomBN #2 via element-wise mult on 12800 points
[31m2 ==> 39378136696[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #2 on 256 points by 12 bits
Time in sec for current matmul = 0.054
-802942856 => 64485085028
[31mMatMul Output Mismatch[0m
Relu #3 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.144
Time in sec for current matmul = 0.053
8060636134 => -45210048968
[31mMatMul Output Mismatch[0m
Relu #5 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.144
Truncate #3 on 12800 points by 12 bits
HomBN #3 via element-wise mult on 12800 points
[31m2 ==> -29072904584[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #4 on 256 points by 12 bits
Time in sec for current matmul = 0.05
-169833360 => 12774252974
[31mMatMul Output Mismatch[0m
Relu #7 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.144
Time in sec for current matmul = 0.047
1596782140 => 15473553316
[31mMatMul Output Mismatch[0m
Relu #9 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.144
Truncate #5 on 12800 points by 12 bits
HomBN #4 via element-wise mult on 12800 points
[31m2 ==> 48504942200[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #6 on 256 points by 12 bits
Time in sec for current matmul = 0.052
62719596 => 55243528572
[31mMatMul Output Mismatch[0m
Relu #11 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.144
Time in sec for current matmul = 0.053
6905441578 => 51897438576
[31mMatMul Output Mismatch[0m
Relu #13 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.144
Thread i = 0, total data sent till now = 6832922
Thread i = 1, total data sent till now = 2193407
Thread i = 2, total data sent till now = 1816791
Thread i = 3, total data sent till now = 2193407
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Total time taken = 3107751 microseconds.
Total data sent = 5.58852 MiB.
Number of rounds = 205
Total comm (sent+received) = (see SERVER OUTPUT)
------------------------------------------------------
Total time in Conv = 0 seconds.
Total time in MatMul = 0.355 seconds.
Total time in BatchNorm = 0.388 seconds.
Total time in Truncation = 1.175 seconds.
Total time in Relu = 1.008 seconds.
Total time in MaxPool = 0 seconds.
Total time in AvgPool = 0 seconds.
Total time in ArgMax = 0 seconds.
Total time in MatAdd = 0 seconds.
Total time in MatAddBroadCast = 0 seconds.
Total time in MulCir = 0 seconds.
Total time in ScalarMul = 0 seconds.
Total time in Sigmoid = 0 seconds.
Total time in Tanh = 0 seconds.
Total time in Sqrt = 0 seconds.
Total time in NormaliseL2 = 0 seconds.
------------------------------------------------------
Conv data sent = 0 MiB.
MatMul data sent = 1.66692 MiB.
BatchNorm data sent = 2.85786 MiB.
Truncation data sent = 1.01418 MiB.
Relu data sent = 0.0495605 MiB.
Maxpool data sent = 0 MiB.
Avgpool data sent = 0 MiB.
ArgMax data sent = 0 MiB.
MatAdd data sent = 0 MiB.
MatAddBroadCast data sent = 0 MiB.
MulCir data sent = 0 MiB.
Sigmoid data sent = 0 MiB.
Tanh data sent = 0 MiB.
Sqrt data sent = 0 MiB.
NormaliseL2 data sent = 0 MiB.
------------------------------------------------------
12670274
12670274
12670275
12670274
12670274
12670275
12670274
12670274
12670274
12670274
12670275
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670275
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670275
12670274
12670274
12670274
12670274
12670275
12670274
12670274
12670274
12670274
12670274
12670275
12670274
12670274
12670274
12670274
12670274
12670274
12670275
12670274
12670274
12670275
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670275
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670275
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670275
12670274
12670274
12670274
12670274
12670274
12670275
12670275
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670275
12670274
12670274
12670274
12670275
12670274
12670274
12670274
12670274
12670275
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670275
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670275
12670274
12670275
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670275
12670274
12670274
12670274
12670274
12670274
12670274
12670275
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670274
12670275
12670275
12670274
