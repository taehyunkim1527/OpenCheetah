Using Eigen for Matmul
Doing BaseOT ...
using silent ot pack
using silent ot pack
using silent ot pack
using silent ot pack
After one-time setup, communication
Thread i = 0, total data sent till now = 1997772
Thread i = 1, total data sent till now = 1726247
Thread i = 2, total data sent till now = 1726247
Thread i = 3, total data sent till now = 1726247
-----------Syncronizing-----------
secret_share_mod: 137438953472 bitlength: 37
backend: Ring-SilentOT-Cheetah
-----------Syncronized - now starting execution-----------
HomBN #1 via element-wise mult on 384 points
[31m4 ==> 0[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Time in sec for current matmul = 0.036
512 => 0
[31mMatMul Output Mismatch[0m
Relu #1 on 128 points, truncate=1 by 12 bits
Time in sec for current relu = 0.143
Truncate #1 on 384 points by 12 bits
HomBN #2 via element-wise mult on 384 points
[31m2 ==> 41616388416[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #2 on 128 points by 12 bits
Time in sec for current matmul = 0.038
-160652810 => 51925218686
[31mMatMul Output Mismatch[0m
Relu #3 on 128 points, truncate=1 by 12 bits
Time in sec for current relu = 0.143
Truncate #3 on 384 points by 12 bits
HomBN #3 via element-wise mult on 384 points
[31m2 ==> -49383231168[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #4 on 128 points by 12 bits
Time in sec for current matmul = 0.039
90038578 => 23840106024
[31mMatMul Output Mismatch[0m
Relu #5 on 128 points, truncate=1 by 12 bits
Time in sec for current relu = 0.143
Truncate #5 on 384 points by 12 bits
HomBN #4 via element-wise mult on 384 points
[31m2 ==> 67721736512[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #6 on 128 points by 12 bits
Time in sec for current matmul = 0.042
-30518194 => 29982752138
[31mMatMul Output Mismatch[0m
Relu #7 on 128 points, truncate=1 by 12 bits
Time in sec for current relu = 0.143
Truncate #7 on 384 points by 12 bits
HomBN #5 via element-wise mult on 384 points
[31m2 ==> -36766764736[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #8 on 128 points by 12 bits
Time in sec for current matmul = 0.039
2157000 => 23171593556
[31mMatMul Output Mismatch[0m
Relu #9 on 128 points, truncate=1 by 12 bits
Time in sec for current relu = 0.143
Thread i = 0, total data sent till now = 3565328
Thread i = 1, total data sent till now = 1757747
Thread i = 2, total data sent till now = 1733011
Thread i = 3, total data sent till now = 1757747
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Total time taken = 2310467 microseconds.
Total data sent = 1.56147 MiB.
Number of rounds = 195
Total comm (sent+received) = (see SERVER OUTPUT)
------------------------------------------------------
Total time in Conv = 0 seconds.
Total time in MatMul = 0.194 seconds.
Total time in BatchNorm = 0.184 seconds.
Total time in Truncation = 1.192 seconds.
Total time in Relu = 0.715 seconds.
Total time in MaxPool = 0 seconds.
Total time in AvgPool = 0 seconds.
Total time in ArgMax = 0 seconds.
Total time in MatAdd = 0 seconds.
Total time in MatAddBroadCast = 0 seconds.
Total time in MulCir = 0 seconds.
Total time in ScalarMul = 0 seconds.
Total time in Sigmoid = 0 seconds.
Total time in Tanh = 0 seconds.
Total time in Sqrt = 0 seconds.
Total time in NormaliseL2 = 0 seconds.
------------------------------------------------------
Conv data sent = 0 MiB.
MatMul data sent = 0.595387 MiB.
BatchNorm data sent = 0.8931 MiB.
Truncation data sent = 0.0549011 MiB.
Relu data sent = 0.0180817 MiB.
Maxpool data sent = 0 MiB.
Avgpool data sent = 0 MiB.
ArgMax data sent = 0 MiB.
MatAdd data sent = 0 MiB.
MatAddBroadCast data sent = 0 MiB.
MulCir data sent = 0 MiB.
Sigmoid data sent = 0 MiB.
Tanh data sent = 0 MiB.
Sqrt data sent = 0 MiB.
NormaliseL2 data sent = 0 MiB.
------------------------------------------------------
5657129
5657129
5657128
5657129
5657128
5657128
5657128
5657128
5657128
5657129
5657129
5657129
5657128
5657128
5657129
5657129
5657128
5657129
5657128
5657129
5657128
5657129
5657128
5657128
5657128
5657128
5657129
5657128
5657128
5657128
5657128
5657129
5657128
5657129
5657129
5657128
5657128
5657128
5657128
5657129
5657129
5657128
5657128
5657128
5657128
5657128
5657129
5657128
5657128
5657129
5657128
5657128
5657129
5657129
5657129
5657129
5657128
5657129
5657129
5657128
5657129
5657128
5657129
5657128
5657128
5657128
5657128
5657128
5657128
5657128
5657129
5657128
5657128
5657128
5657128
5657128
5657129
5657128
5657129
5657128
5657128
5657129
5657128
5657128
5657129
5657128
5657129
5657128
5657128
5657129
5657128
5657129
5657128
5657129
5657128
5657129
5657129
5657128
5657129
5657128
5657128
5657128
5657129
5657128
5657128
5657128
5657129
5657128
5657128
5657128
5657129
5657129
5657129
5657128
5657128
5657128
5657129
5657129
5657128
5657128
5657128
5657128
5657128
5657128
5657128
5657129
5657129
5657129
