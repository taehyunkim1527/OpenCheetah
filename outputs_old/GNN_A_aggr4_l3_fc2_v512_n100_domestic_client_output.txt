Using Eigen for Matmul
Doing BaseOT ...
using silent ot pack
using silent ot pack
using silent ot pack
using silent ot pack
After one-time setup, communication
Thread i = 0, total data sent till now = 1997807
Thread i = 1, total data sent till now = 1726247
Thread i = 2, total data sent till now = 1726247
Thread i = 3, total data sent till now = 1726247
-----------Syncronizing-----------
secret_share_mod: 137438953472 bitlength: 37
backend: Ring-SilentOT-Cheetah
-----------Syncronized - now starting execution-----------
HomBN #1 via element-wise mult on 51200 points
[31m4 ==> 0[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Time in sec for current matmul = 0.083
2048 => 0
[31mMatMul Output Mismatch[0m
Relu #1 on 512 points, truncate=1 by 12 bits
Time in sec for current relu = 0.146
Truncate #1 on 51200 points by 12 bits
HomBN #2 via element-wise mult on 51200 points
[31m2 ==> 42184608946[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #2 on 512 points by 12 bits
Time in sec for current matmul = 0.089
-135071374 => -37876995175
[31mMatMul Output Mismatch[0m
Relu #3 on 512 points, truncate=1 by 12 bits
Time in sec for current relu = 0.145
Time in sec for current matmul = 0.082
-1024 => 8420828236
[31mMatMul Output Mismatch[0m
Relu #5 on 512 points, truncate=1 by 12 bits
Time in sec for current relu = 0.145
Truncate #3 on 51200 points by 12 bits
HomBN #3 via element-wise mult on 51200 points
[31m2 ==> 34802633906[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #4 on 512 points by 12 bits
Time in sec for current matmul = 0.088
-33660294 => 44377030850
[31mMatMul Output Mismatch[0m
Relu #7 on 512 points, truncate=1 by 12 bits
Time in sec for current relu = 0.145
Time in sec for current matmul = 0.084
11094258720 => -64699541796
[31mMatMul Output Mismatch[0m
Relu #9 on 512 points, truncate=1 by 12 bits
Time in sec for current relu = 0.145
Truncate #5 on 51200 points by 12 bits
HomBN #4 via element-wise mult on 51200 points
[31m2 ==> 51378523314[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #6 on 512 points by 12 bits
Time in sec for current matmul = 0.087
-677744266 => 21635834698
[31mMatMul Output Mismatch[0m
Relu #11 on 512 points, truncate=1 by 12 bits
Time in sec for current relu = 0.146
Time in sec for current matmul = 0.082
5408959692 => 13382801692
[31mMatMul Output Mismatch[0m
Relu #13 on 512 points, truncate=1 by 12 bits
Time in sec for current relu = 0.145
Thread i = 0, total data sent till now = 15578280
Thread i = 1, total data sent till now = 3533319
Thread i = 2, total data sent till now = 2072615
Thread i = 3, total data sent till now = 3533319
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Total time taken = 5011101 microseconds.
Total data sent = 16.7284 MiB.
Number of rounds = 205
Total comm (sent+received) = (see SERVER OUTPUT)
------------------------------------------------------
Total time in Conv = 0 seconds.
Total time in MatMul = 0.595 seconds.
Total time in BatchNorm = 1.083 seconds.
Total time in Truncation = 1.539 seconds.
Total time in Relu = 1.017 seconds.
Total time in MaxPool = 0 seconds.
Total time in AvgPool = 0 seconds.
Total time in ArgMax = 0 seconds.
Total time in MatAdd = 0 seconds.
Total time in MatAddBroadCast = 0 seconds.
Total time in MulCir = 0 seconds.
Total time in ScalarMul = 0 seconds.
Total time in Sigmoid = 0 seconds.
Total time in Tanh = 0 seconds.
Total time in Sqrt = 0 seconds.
Total time in NormaliseL2 = 0 seconds.
------------------------------------------------------
Conv data sent = 0 MiB.
MatMul data sent = 3.33384 MiB.
BatchNorm data sent = 9.28718 MiB.
Truncation data sent = 4.00931 MiB.
Relu data sent = 0.098053 MiB.
Maxpool data sent = 0 MiB.
Avgpool data sent = 0 MiB.
ArgMax data sent = 0 MiB.
MatAdd data sent = 0 MiB.
MatAddBroadCast data sent = 0 MiB.
MulCir data sent = 0 MiB.
Sigmoid data sent = 0 MiB.
Tanh data sent = 0 MiB.
Sqrt data sent = 0 MiB.
NormaliseL2 data sent = 0 MiB.
------------------------------------------------------
3267286
3267287
3267287
3267287
3267287
3267287
3267286
3267287
3267287
3267286
3267286
3267286
3267286
3267287
3267286
3267287
3267287
3267286
3267287
3267286
3267286
3267286
3267286
3267287
3267287
3267287
3267286
3267287
3267286
3267287
3267286
3267286
3267287
3267286
3267287
3267287
3267287
3267287
3267286
3267286
3267287
3267287
3267286
3267286
3267286
3267287
3267286
3267287
3267286
3267286
3267286
3267287
3267286
3267287
3267286
3267287
3267287
3267287
3267286
3267287
3267287
3267287
3267287
3267287
3267287
3267286
3267287
3267287
3267287
3267286
3267286
3267287
3267286
3267287
3267286
3267286
3267286
3267286
3267286
3267286
3267287
3267287
3267287
3267286
3267286
3267287
3267287
3267286
3267286
3267286
3267286
3267287
3267286
3267287
3267287
3267287
3267286
3267286
3267286
3267287
3267287
3267287
3267286
3267286
3267287
3267286
3267286
3267287
3267287
3267287
3267287
3267286
3267286
3267287
3267286
3267287
3267287
3267286
3267287
3267286
3267287
3267287
3267286
3267287
3267286
3267286
3267286
3267286
3267286
3267286
3267286
3267286
3267287
3267286
3267286
3267287
3267287
3267287
3267286
3267287
3267287
3267286
3267287
3267287
3267286
3267286
3267286
3267287
3267287
3267287
3267287
3267287
3267287
3267286
3267286
3267286
3267287
3267287
3267286
3267287
3267286
3267287
3267286
3267287
3267287
3267286
3267286
3267287
3267287
3267286
3267287
3267287
3267287
3267286
3267287
3267286
3267287
3267287
3267287
3267286
3267287
3267287
3267287
3267287
3267287
3267287
3267287
3267286
3267286
3267286
3267286
3267286
3267287
3267287
3267287
3267286
3267287
3267286
3267286
3267287
3267286
3267287
3267286
3267287
3267286
3267287
3267286
3267286
3267287
3267286
3267287
3267287
3267287
3267287
3267286
3267287
3267287
3267286
3267286
3267287
3267286
3267286
3267287
3267286
3267286
3267287
3267286
3267287
3267286
3267286
3267287
3267286
3267286
3267286
3267286
3267286
3267287
3267286
3267286
3267286
3267286
3267287
3267287
3267287
3267286
3267286
3267287
3267286
3267287
3267287
3267287
3267287
3267287
3267286
3267286
3267287
3267286
3267287
3267287
3267287
3267287
3267287
3267286
3267287
3267287
3267286
3267286
3267287
3267287
3267286
3267286
3267287
3267286
3267287
3267286
3267287
3267287
3267287
3267286
3267286
3267286
3267287
3267287
3267286
3267286
3267287
3267287
3267287
3267287
3267286
3267287
3267287
3267286
3267287
3267287
3267287
3267286
3267286
3267287
3267286
3267287
3267287
3267286
3267286
3267287
3267286
3267286
3267286
3267287
3267286
3267287
3267286
3267287
3267287
3267287
3267286
3267286
3267287
3267286
3267286
3267287
3267286
3267286
3267287
3267287
3267287
3267286
3267286
3267286
3267287
3267286
3267287
3267286
3267287
3267287
3267286
3267287
3267286
3267286
3267286
3267286
3267286
3267286
3267286
3267286
3267287
3267286
3267286
3267287
3267286
3267286
3267287
3267286
3267287
3267287
3267287
3267286
3267287
3267286
3267286
3267286
3267286
3267287
3267286
3267287
3267287
3267286
3267286
3267286
3267286
3267286
3267286
3267286
3267287
3267287
3267287
3267286
3267286
3267287
3267286
3267287
3267286
3267287
3267286
3267286
3267286
3267286
3267287
3267287
3267286
3267286
3267287
3267286
3267286
3267287
3267287
3267287
3267287
3267287
3267287
3267287
3267286
3267286
3267286
3267286
3267286
3267287
3267286
3267286
3267287
3267286
3267286
3267286
3267287
3267286
3267287
3267286
3267286
3267286
3267287
3267287
3267287
3267286
3267286
3267286
3267287
3267286
3267287
3267287
3267286
3267287
3267287
3267287
3267287
3267286
3267286
3267287
3267287
3267286
3267287
3267287
3267287
3267287
3267287
3267286
3267286
3267287
3267287
3267286
3267286
3267286
3267286
3267286
3267286
3267287
3267287
3267287
3267286
3267286
3267287
3267287
3267286
3267287
3267287
3267286
3267287
3267287
3267286
3267286
3267286
3267286
3267287
3267287
3267287
3267286
3267287
3267287
3267286
3267286
3267287
3267287
3267287
3267287
3267287
3267286
3267287
3267286
3267287
3267287
3267286
3267286
3267286
3267287
3267286
3267287
3267287
3267287
3267286
3267286
3267286
3267286
3267287
3267287
3267286
3267286
3267286
3267287
3267287
3267286
3267287
3267286
3267286
