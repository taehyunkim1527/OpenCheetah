Using Eigen for Matmul
Doing BaseOT ...
using silent ot pack
using silent ot pack
using silent ot pack
using silent ot pack
After one-time setup, communication
Thread i = 0, total data sent till now = 1997806
Thread i = 1, total data sent till now = 1726247
Thread i = 2, total data sent till now = 1726247
Thread i = 3, total data sent till now = 1726247
-----------Syncronizing-----------
secret_share_mod: 137438953472 bitlength: 37
backend: Ring-SilentOT-Cheetah
-----------Syncronized - now starting execution-----------
HomBN #1 via element-wise mult on 2560 points
[31m4 ==> 0[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Time in sec for current matmul = 0.071
1024 => 0
[31mMatMul Output Mismatch[0m
Relu #1 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.284
Truncate #1 on 2560 points by 12 bits
HomBN #2 via element-wise mult on 2560 points
[31m2 ==> -30350331430[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #2 on 256 points by 12 bits
Time in sec for current matmul = 0.07
-266035130 => -24577595817
[31mMatMul Output Mismatch[0m
Relu #3 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.284
Time in sec for current matmul = 0.071
-512 => 28017235702
[31mMatMul Output Mismatch[0m
Relu #5 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.284
Truncate #3 on 2560 points by 12 bits
HomBN #3 via element-wise mult on 2560 points
[31m2 ==> -35651931686[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #4 on 256 points by 12 bits
Time in sec for current matmul = 0.072
198001462 => 39778208616
[31mMatMul Output Mismatch[0m
Relu #7 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.284
Time in sec for current matmul = 0.07
4972276568 => 64688555886
[31mMatMul Output Mismatch[0m
Relu #9 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.284
Truncate #5 on 2560 points by 12 bits
HomBN #4 via element-wise mult on 2560 points
[31m2 ==> -39477136934[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #6 on 256 points by 12 bits
Time in sec for current matmul = 0.07
127058276 => 9651908392
[31mMatMul Output Mismatch[0m
Relu #11 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.284
Time in sec for current matmul = 0.071
1206489060 => 4861662358
[31mMatMul Output Mismatch[0m
Relu #13 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.284
Thread i = 0, total data sent till now = 4519091
Thread i = 1, total data sent till now = 1843967
Thread i = 2, total data sent till now = 1750551
Thread i = 3, total data sent till now = 1843967
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Total time taken = 4894817 microseconds.
Total data sent = 2.6522 MiB.
Number of rounds = 205
Total comm (sent+received) = (see SERVER OUTPUT)
------------------------------------------------------
Total time in Conv = 0 seconds.
Total time in MatMul = 0.495 seconds.
Total time in BatchNorm = 0.221 seconds.
Total time in Truncation = 2.07 seconds.
Total time in Relu = 1.988 seconds.
Total time in MaxPool = 0 seconds.
Total time in AvgPool = 0 seconds.
Total time in ArgMax = 0 seconds.
Total time in MatAdd = 0 seconds.
Total time in MatAddBroadCast = 0 seconds.
Total time in MulCir = 0 seconds.
Total time in ScalarMul = 0 seconds.
Total time in Sigmoid = 0 seconds.
Total time in Tanh = 0 seconds.
Total time in Sqrt = 0 seconds.
Total time in NormaliseL2 = 0 seconds.
------------------------------------------------------
Conv data sent = 0 MiB.
MatMul data sent = 1.66685 MiB.
BatchNorm data sent = 0.714452 MiB.
Truncation data sent = 0.221329 MiB.
Relu data sent = 0.0495605 MiB.
Maxpool data sent = 0 MiB.
Avgpool data sent = 0 MiB.
ArgMax data sent = 0 MiB.
MatAdd data sent = 0 MiB.
MatAddBroadCast data sent = 0 MiB.
MulCir data sent = 0 MiB.
Sigmoid data sent = 0 MiB.
Tanh data sent = 0 MiB.
Sqrt data sent = 0 MiB.
NormaliseL2 data sent = 0 MiB.
------------------------------------------------------
1186930
1186930
1186930
1186930
1186930
1186931
1186930
1186930
1186930
1186930
1186930
1186930
1186930
1186931
1186931
1186930
1186930
1186930
1186930
1186930
1186931
1186931
1186930
1186931
1186930
1186931
1186930
1186931
1186930
1186931
1186931
1186930
1186931
1186930
1186930
1186930
1186931
1186931
1186930
1186930
1186930
1186931
1186930
1186930
1186930
1186930
1186930
1186930
1186931
1186930
1186930
1186931
1186930
1186930
1186930
1186930
1186931
1186931
1186930
1186930
1186930
1186930
1186931
1186930
1186930
1186930
1186931
1186930
1186930
1186930
1186930
1186930
1186931
1186930
1186930
1186930
1186930
1186931
1186930
1186930
1186930
1186930
1186930
1186930
1186931
1186930
1186930
1186930
1186930
1186931
1186931
1186930
1186930
1186930
1186930
1186931
1186931
1186930
1186930
1186930
1186931
1186931
1186930
1186931
1186930
1186930
1186930
1186930
1186930
1186931
1186931
1186930
1186930
1186930
1186931
1186930
1186930
1186930
1186930
1186930
1186930
1186931
1186931
1186931
1186930
1186930
1186930
1186930
1186930
1186930
1186930
1186931
1186930
1186930
1186931
1186930
1186930
1186930
1186931
1186930
1186931
1186930
1186930
1186931
1186931
1186930
1186930
1186930
1186930
1186931
1186931
1186930
1186930
1186930
1186931
1186931
1186931
1186931
1186930
1186930
1186930
1186930
1186930
1186930
1186931
1186930
1186930
1186930
1186930
1186930
1186930
1186930
1186930
1186930
1186930
1186930
1186930
1186930
1186930
1186931
1186930
1186930
1186930
1186931
1186930
1186931
1186930
1186931
1186930
1186930
1186930
1186930
1186930
1186930
1186930
1186930
1186931
1186930
1186931
1186931
1186930
1186931
1186930
1186930
1186930
1186930
1186930
1186930
1186930
1186930
1186930
1186931
1186930
1186931
1186930
1186930
1186931
1186930
1186930
1186931
1186930
1186930
1186930
1186930
1186930
1186931
1186931
1186930
1186930
1186931
1186930
1186931
1186931
1186930
1186930
1186930
1186931
1186930
1186930
1186930
1186930
1186930
1186930
1186930
1186930
1186930
1186931
1186931
1186930
1186931
1186930
1186930
1186930
1186931
1186931
1186931
