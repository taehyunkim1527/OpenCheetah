Using Eigen for Matmul
Doing BaseOT ...
using silent ot pack
using silent ot pack
using silent ot pack
using silent ot pack
After one-time setup, communication
Thread i = 0, total data sent till now = 1997770
Thread i = 1, total data sent till now = 1726247
Thread i = 2, total data sent till now = 1726247
Thread i = 3, total data sent till now = 1726247
-----------Syncronizing-----------
secret_share_mod: 137438953472 bitlength: 37
backend: Ring-SilentOT-Cheetah
-----------Syncronized - now starting execution-----------
HomBN #1 via element-wise mult on 7680 points
[31m4 ==> 0[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Time in sec for current matmul = 0.143
1024 => 0
[31mMatMul Output Mismatch[0m
Relu #1 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.704
Truncate #1 on 7680 points by 12 bits
HomBN #2 via element-wise mult on 7680 points
[31m2 ==> 24133601276[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #2 on 256 points by 12 bits
Time in sec for current matmul = 0.147
407117492 => 35316904536
[31mMatMul Output Mismatch[0m
Relu #3 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.704
Time in sec for current matmul = 0.147
4414613580 => 30526260430
[31mMatMul Output Mismatch[0m
Relu #5 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.704
Truncate #3 on 7680 points by 12 bits
HomBN #3 via element-wise mult on 7680 points
[31m2 ==> 39367313404[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #4 on 256 points by 12 bits
Time in sec for current matmul = 0.147
-132360368 => -15207481360
[31mMatMul Output Mismatch[0m
Relu #7 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.704
Time in sec for current matmul = 0.144
-512 => 68327141312
[31mMatMul Output Mismatch[0m
Relu #9 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.704
Truncate #5 on 7680 points by 12 bits
HomBN #4 via element-wise mult on 7680 points
[31m2 ==> 67083274236[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #6 on 256 points by 12 bits
Time in sec for current matmul = 0.147
-32879448 => 16795330718
[31mMatMul Output Mismatch[0m
Relu #11 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.704
Time in sec for current matmul = 0.147
2099416840 => 32665022864
[31mMatMul Output Mismatch[0m
Relu #13 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.704
Thread i = 0, total data sent till now = 5301381
Thread i = 1, total data sent till now = 2018687
Thread i = 2, total data sent till now = 1783671
Thread i = 3, total data sent till now = 2018687
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Total time taken = 12362390 microseconds.
Total data sent = 3.76312 MiB.
Number of rounds = 205
Total comm (sent+received) = (see SERVER OUTPUT)
------------------------------------------------------
Total time in Conv = 0 seconds.
Total time in MatMul = 1.022 seconds.
Total time in BatchNorm = 0.788 seconds.
Total time in Truncation = 5.133 seconds.
Total time in Relu = 4.928 seconds.
Total time in MaxPool = 0 seconds.
Total time in AvgPool = 0 seconds.
Total time in ArgMax = 0 seconds.
Total time in MatAdd = 0 seconds.
Total time in MatAddBroadCast = 0 seconds.
Total time in MulCir = 0 seconds.
Total time in ScalarMul = 0 seconds.
Total time in Sigmoid = 0 seconds.
Total time in Tanh = 0 seconds.
Total time in Sqrt = 0 seconds.
Total time in NormaliseL2 = 0 seconds.
------------------------------------------------------
Conv data sent = 0 MiB.
MatMul data sent = 1.66696 MiB.
BatchNorm data sent = 1.42884 MiB.
Truncation data sent = 0.617752 MiB.
Relu data sent = 0.0495605 MiB.
Maxpool data sent = 0 MiB.
Avgpool data sent = 0 MiB.
ArgMax data sent = 0 MiB.
MatAdd data sent = 0 MiB.
MatAddBroadCast data sent = 0 MiB.
MulCir data sent = 0 MiB.
Sigmoid data sent = 0 MiB.
Tanh data sent = 0 MiB.
Sqrt data sent = 0 MiB.
NormaliseL2 data sent = 0 MiB.
------------------------------------------------------
7974860
7974860
7974861
7974860
7974860
7974861
7974860
7974860
7974860
7974860
7974860
7974861
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974861
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974861
7974861
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974861
7974860
7974860
7974860
7974860
7974860
7974860
7974861
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974861
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974861
7974860
7974860
7974860
7974860
7974861
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974861
7974860
7974860
7974860
7974861
7974860
7974860
7974860
7974860
7974860
7974861
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974861
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974861
7974860
7974860
7974860
7974860
7974860
7974860
7974861
7974860
7974860
7974860
7974860
7974860
7974861
7974861
7974861
7974860
7974860
7974861
7974860
7974860
7974861
7974860
7974861
7974860
7974860
7974860
7974860
7974860
7974861
7974860
7974860
7974860
7974860
7974860
7974860
7974861
7974860
7974860
7974861
7974860
7974860
7974860
7974860
7974861
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974861
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974860
7974861
7974860
