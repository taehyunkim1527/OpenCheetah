Using Eigen for Matmul
Doing BaseOT ...
using silent ot pack
using silent ot pack
using silent ot pack
using silent ot pack
After one-time setup, communication
Thread i = 0, total data sent till now = 1997809
Thread i = 1, total data sent till now = 1726247
Thread i = 2, total data sent till now = 1726247
Thread i = 3, total data sent till now = 1726247
-----------Syncronizing-----------
secret_share_mod: 137438953472 bitlength: 37
backend: Ring-SilentOT-Cheetah
-----------Syncronized - now starting execution-----------
HomBN #1 via element-wise mult on 768 points
[31m4 ==> 0[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Time in sec for current matmul = 0.018
1024 => -1
[31mMatMul Output Mismatch[0m
Relu #1 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.002
Truncate #1 on 256 points by 12 bits
HomBN #2 via element-wise mult on 256 points
[31m12 ==> 17882301996[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #2 on 256 points by 12 bits
Time in sec for current matmul = 0.02
392072746 => 39833880278
[31mMatMul Output Mismatch[0m
Relu #3 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.002
Truncate #3 on 256 points by 12 bits
HomBN #3 via element-wise mult on 256 points
[31m19450148 ==> 53524850756[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #4 on 256 points by 12 bits
Time in sec for current matmul = 0.022
382085474 => 25261133170
[31mMatMul Output Mismatch[0m
Relu #5 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.002
Truncate #5 on 256 points by 12 bits
HomBN #4 via element-wise mult on 256 points
[31m12334550 ==> -21762552044[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #6 on 256 points by 12 bits
Time in sec for current matmul = 0.023
-227176662 => 64263190012
[31mMatMul Output Mismatch[0m
Relu #7 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.002
Thread i = 0, total data sent till now = 3752571
Thread i = 1, total data sent till now = 1756199
Thread i = 2, total data sent till now = 1733079
Thread i = 3, total data sent till now = 1756199
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Total time taken = 159424 microseconds.
Total data sent = 1.73712 MiB.
Number of rounds = 151
Total comm (sent+received) = (see SERVER OUTPUT)
------------------------------------------------------
Total time in Conv = 0 seconds.
Total time in MatMul = 0.083 seconds.
Total time in BatchNorm = 0.04 seconds.
Total time in Truncation = 0.012 seconds.
Total time in Relu = 0.008 seconds.
Total time in MaxPool = 0 seconds.
Total time in AvgPool = 0 seconds.
Total time in ArgMax = 0 seconds.
Total time in MatAdd = 0 seconds.
Total time in MatAddBroadCast = 0 seconds.
Total time in MulCir = 0 seconds.
Total time in ScalarMul = 0 seconds.
Total time in Sigmoid = 0 seconds.
Total time in Tanh = 0 seconds.
Total time in Sqrt = 0 seconds.
Total time in NormaliseL2 = 0 seconds.
------------------------------------------------------
Conv data sent = 0 MiB.
MatMul data sent = 0.952554 MiB.
BatchNorm data sent = 0.714402 MiB.
Truncation data sent = 0.0418396 MiB.
Relu data sent = 0.0283203 MiB.
Maxpool data sent = 0 MiB.
Avgpool data sent = 0 MiB.
ArgMax data sent = 0 MiB.
MatAdd data sent = 0 MiB.
MatAddBroadCast data sent = 0 MiB.
MulCir data sent = 0 MiB.
Sigmoid data sent = 0 MiB.
Tanh data sent = 0 MiB.
Sqrt data sent = 0 MiB.
NormaliseL2 data sent = 0 MiB.
------------------------------------------------------
15689256
15689257
15689257
15689256
15689256
15689257
15689256
15689256
15689256
15689257
15689256
15689257
15689257
15689256
15689256
15689257
15689256
15689256
15689257
15689256
15689257
15689256
15689256
15689256
15689256
15689256
15689256
15689256
15689256
15689256
15689257
15689257
15689257
15689257
15689257
15689257
15689256
15689256
15689257
15689256
15689257
15689256
15689256
15689256
15689256
15689256
15689257
15689256
15689256
15689257
15689257
15689256
15689256
15689256
15689256
15689256
15689256
15689256
15689256
15689256
15689257
15689257
15689256
15689257
15689256
15689257
15689257
15689257
15689256
15689256
15689256
15689257
15689256
15689257
15689256
15689257
15689256
15689256
15689256
15689257
15689256
15689257
15689256
15689256
15689256
15689256
15689256
15689256
15689256
15689257
15689256
15689256
15689257
15689256
15689256
15689257
15689257
15689256
15689257
15689257
15689257
15689256
15689256
15689256
15689257
15689256
15689256
15689257
15689256
15689257
15689256
15689256
15689256
15689256
15689256
15689257
15689256
15689257
15689257
15689256
15689257
15689257
15689256
15689256
15689257
15689256
15689257
15689256
15689256
15689257
15689256
15689257
15689256
15689256
15689256
15689256
15689257
15689257
15689256
15689257
15689256
15689256
15689256
15689257
15689257
15689257
15689256
15689257
15689256
15689256
15689256
15689256
15689256
15689257
15689256
15689256
15689256
15689257
15689257
15689256
15689256
15689257
15689256
15689256
15689256
15689256
15689256
15689256
15689256
15689256
15689256
15689257
15689256
15689256
15689257
15689256
15689256
15689256
15689256
15689256
15689257
15689256
15689256
15689256
15689256
15689256
15689256
15689256
15689256
15689256
15689256
15689256
15689256
15689256
15689257
15689257
15689256
15689256
15689256
15689256
15689256
15689256
15689256
15689257
15689257
15689257
15689256
15689256
15689257
15689257
15689257
15689257
15689256
15689256
15689257
15689257
15689257
15689257
15689257
15689257
15689257
15689256
15689256
15689257
15689257
15689256
15689257
15689256
15689256
15689256
15689257
15689256
15689257
15689256
15689256
15689257
15689256
15689257
15689257
15689256
15689256
15689257
15689257
15689256
15689256
15689256
15689257
15689256
15689256
15689257
15689257
15689257
15689256
15689257
15689257
15689256
