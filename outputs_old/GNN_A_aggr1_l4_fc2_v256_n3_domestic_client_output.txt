Using Eigen for Matmul
Doing BaseOT ...
using silent ot pack
using silent ot pack
using silent ot pack
using silent ot pack
After one-time setup, communication
Thread i = 0, total data sent till now = 1997777
Thread i = 1, total data sent till now = 1726247
Thread i = 2, total data sent till now = 1726247
Thread i = 3, total data sent till now = 1726247
-----------Syncronizing-----------
secret_share_mod: 137438953472 bitlength: 37
backend: Ring-SilentOT-Cheetah
-----------Syncronized - now starting execution-----------
HomBN #1 via element-wise mult on 768 points
[31m4 ==> 0[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Time in sec for current matmul = 0.049
1024 => 0
[31mMatMul Output Mismatch[0m
Relu #1 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.144
Truncate #1 on 256 points by 12 bits
Time in sec for current matmul = 0.053
3072 => -52656166446
[31mMatMul Output Mismatch[0m
Relu #3 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.144
Time in sec for current matmul = 0.053
-512 => -1515891846
[31mMatMul Output Mismatch[0m
Relu #5 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.144
Truncate #2 on 256 points by 12 bits
Time in sec for current matmul = 0.051
2048 => 53759090688
[31mMatMul Output Mismatch[0m
Relu #7 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.144
Time in sec for current matmul = 0.053
6719886848 => 31508985506
[31mMatMul Output Mismatch[0m
Relu #9 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.144
Truncate #3 on 256 points by 12 bits
Time in sec for current matmul = 0.052
3938626254 => -36825085416
[31mMatMul Output Mismatch[0m
Relu #11 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.144
Time in sec for current matmul = 0.053
-512 => 7474803701
[31mMatMul Output Mismatch[0m
Relu #13 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.144
Truncate #4 on 256 points by 12 bits
Time in sec for current matmul = 0.053
934353536 => -2738389886
[31mMatMul Output Mismatch[0m
Relu #15 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.144
Time in sec for current matmul = 0.052
-512 => 31415562474
[31mMatMul Output Mismatch[0m
Relu #17 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.144
Thread i = 0, total data sent till now = 4442318
Thread i = 1, total data sent till now = 1765519
Thread i = 2, total data sent till now = 1736223
Thread i = 3, total data sent till now = 1765519
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Total time taken = 2856586 microseconds.
Total data sent = 2.41572 MiB.
Number of rounds = 211
Total comm (sent+received) = (see SERVER OUTPUT)
------------------------------------------------------
Total time in Conv = 0 seconds.
Total time in MatMul = 0.469 seconds.
Total time in BatchNorm = 0.036 seconds.
Total time in Truncation = 0.856 seconds.
Total time in Relu = 1.296 seconds.
Total time in MaxPool = 0 seconds.
Total time in AvgPool = 0 seconds.
Total time in ArgMax = 0 seconds.
Total time in MatAdd = 0 seconds.
Total time in MatAddBroadCast = 0 seconds.
Total time in MulCir = 0 seconds.
Total time in ScalarMul = 0 seconds.
Total time in Sigmoid = 0 seconds.
Total time in Tanh = 0 seconds.
Total time in Sqrt = 0 seconds.
Total time in NormaliseL2 = 0 seconds.
------------------------------------------------------
Conv data sent = 0 MiB.
MatMul data sent = 2.14323 MiB.
BatchNorm data sent = 0.17855 MiB.
Truncation data sent = 0.0302124 MiB.
Relu data sent = 0.0637207 MiB.
Maxpool data sent = 0 MiB.
Avgpool data sent = 0 MiB.
ArgMax data sent = 0 MiB.
MatAdd data sent = 0 MiB.
MatAddBroadCast data sent = 0 MiB.
MulCir data sent = 0 MiB.
Sigmoid data sent = 0 MiB.
Tanh data sent = 0 MiB.
Sqrt data sent = 0 MiB.
NormaliseL2 data sent = 0 MiB.
------------------------------------------------------
7669816
7669817
7669817
7669816
7669816
7669816
7669816
7669816
7669817
7669816
7669816
7669816
7669816
7669816
7669817
7669816
7669816
7669816
7669817
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669817
7669816
7669817
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669817
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669817
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669817
7669816
7669816
7669816
7669816
7669816
7669816
7669817
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669817
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669817
7669816
7669816
7669817
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669817
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
7669816
