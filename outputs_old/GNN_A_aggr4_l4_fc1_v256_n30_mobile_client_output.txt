Using Eigen for Matmul
Doing BaseOT ...
using silent ot pack
using silent ot pack
using silent ot pack
using silent ot pack
After one-time setup, communication
Thread i = 0, total data sent till now = 1997755
Thread i = 1, total data sent till now = 1726247
Thread i = 2, total data sent till now = 1726247
Thread i = 3, total data sent till now = 1726247
-----------Syncronizing-----------
secret_share_mod: 137438953472 bitlength: 37
backend: Ring-SilentOT-Cheetah
-----------Syncronized - now starting execution-----------
HomBN #1 via element-wise mult on 7680 points
[31m4 ==> 0[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Time in sec for current matmul = 0.143
1024 => 0
[31mMatMul Output Mismatch[0m
Relu #1 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.704
Truncate #1 on 7680 points by 12 bits
HomBN #2 via element-wise mult on 7680 points
[31m2 ==> 68327963634[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #2 on 256 points by 12 bits
Time in sec for current matmul = 0.147
242111628 => 37045941322
[31mMatMul Output Mismatch[0m
Relu #3 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.704
Truncate #3 on 7680 points by 12 bits
HomBN #3 via element-wise mult on 7680 points
[31m2 ==> -39381763086[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #4 on 256 points by 12 bits
Time in sec for current matmul = 0.147
659774234 => 24720391844
[31mMatMul Output Mismatch[0m
Relu #5 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.704
Truncate #5 on 7680 points by 12 bits
HomBN #4 via element-wise mult on 7680 points
[31m2 ==> -41999008782[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #6 on 256 points by 12 bits
Time in sec for current matmul = 0.147
163036230 => 299357556
[31mMatMul Output Mismatch[0m
Relu #7 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.704
Truncate #7 on 7680 points by 12 bits
HomBN #5 via element-wise mult on 7680 points
[31m2 ==> -12269782030[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #8 on 256 points by 12 bits
Time in sec for current matmul = 0.147
139480874 => 61336405194
[31mMatMul Output Mismatch[0m
Relu #9 on 256 points, truncate=1 by 12 bits
Time in sec for current relu = 0.704
Thread i = 0, total data sent till now = 5191858
Thread i = 1, total data sent till now = 2102959
Thread i = 2, total data sent till now = 1799103
Thread i = 3, total data sent till now = 2102959
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Total time taken = 11593484 microseconds.
Total data sent = 3.83414 MiB.
Number of rounds = 195
Total comm (sent+received) = (see SERVER OUTPUT)
------------------------------------------------------
Total time in Conv = 0 seconds.
Total time in MatMul = 0.731 seconds.
Total time in BatchNorm = 0.971 seconds.
Total time in Truncation = 5.976 seconds.
Total time in Relu = 3.52 seconds.
Total time in MaxPool = 0 seconds.
Total time in AvgPool = 0 seconds.
Total time in ArgMax = 0 seconds.
Total time in MatAdd = 0 seconds.
Total time in MatAddBroadCast = 0 seconds.
Total time in MulCir = 0 seconds.
Total time in ScalarMul = 0 seconds.
Total time in Sigmoid = 0 seconds.
Total time in Tanh = 0 seconds.
Total time in Sqrt = 0 seconds.
Total time in NormaliseL2 = 0 seconds.
------------------------------------------------------
Conv data sent = 0 MiB.
MatMul data sent = 1.19056 MiB.
BatchNorm data sent = 1.78609 MiB.
Truncation data sent = 0.822083 MiB.
Relu data sent = 0.0354004 MiB.
Maxpool data sent = 0 MiB.
Avgpool data sent = 0 MiB.
ArgMax data sent = 0 MiB.
MatAdd data sent = 0 MiB.
MatAddBroadCast data sent = 0 MiB.
MulCir data sent = 0 MiB.
Sigmoid data sent = 0 MiB.
Tanh data sent = 0 MiB.
Sqrt data sent = 0 MiB.
NormaliseL2 data sent = 0 MiB.
------------------------------------------------------
14974710
14974709
14974710
14974710
14974709
14974709
14974709
14974710
14974709
14974709
14974710
14974709
14974710
14974709
14974710
14974710
14974709
14974709
14974709
14974710
14974710
14974709
14974710
14974709
14974709
14974709
14974709
14974710
14974710
14974709
14974709
14974709
14974709
14974709
14974710
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974710
14974709
14974709
14974710
14974710
14974709
14974709
14974709
14974710
14974709
14974710
14974709
14974709
14974710
14974709
14974710
14974709
14974709
14974709
14974709
14974710
14974709
14974709
14974710
14974709
14974709
14974709
14974709
14974709
14974709
14974710
14974709
14974709
14974709
14974709
14974710
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974710
14974710
14974710
14974709
14974710
14974710
14974709
14974709
14974710
14974709
14974709
14974710
14974709
14974709
14974710
14974709
14974709
14974710
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974710
14974709
14974709
14974709
14974710
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974710
14974709
14974710
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974710
14974710
14974709
14974710
14974710
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974710
14974710
14974709
14974709
14974709
14974709
14974710
14974709
14974709
14974710
14974709
14974710
14974709
14974710
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974710
14974709
14974709
14974709
14974709
14974710
14974710
14974710
14974709
14974709
14974709
14974710
14974709
14974710
14974709
14974709
14974709
14974709
14974710
14974710
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974710
14974709
14974709
14974709
14974709
14974710
14974709
14974709
14974709
14974709
14974710
14974710
14974709
14974710
14974710
14974709
14974709
14974710
14974709
14974709
14974709
14974709
14974709
14974709
14974710
14974709
14974709
14974709
14974709
14974709
14974709
14974709
14974710
14974710
14974709
14974709
14974709
