Using Eigen for Matmul
Doing BaseOT ...
using silent ot pack
using silent ot pack
using silent ot pack
using silent ot pack
After one-time setup, communication
Thread i = 0, total data sent till now = 1997727
Thread i = 1, total data sent till now = 1726247
Thread i = 2, total data sent till now = 1726247
Thread i = 3, total data sent till now = 1726247
-----------Syncronizing-----------
secret_share_mod: 137438953472 bitlength: 37
backend: Ring-SilentOT-Cheetah
-----------Syncronized - now starting execution-----------
HomBN #1 via element-wise mult on 6400 points
[31m4 ==> 0[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Time in sec for current matmul = 0.012
512 => 0
[31mMatMul Output Mismatch[0m
Relu #1 on 128 points, truncate=1 by 12 bits
Time in sec for current relu = 0.008
Truncate #1 on 6400 points by 12 bits
HomBN #2 via element-wise mult on 6400 points
[31m2 ==> -49459842484[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #2 on 128 points by 12 bits
Time in sec for current matmul = 0.017
188005830 => 21026602178
[31mMatMul Output Mismatch[0m
Relu #3 on 128 points, truncate=1 by 12 bits
Time in sec for current relu = 0.001
Truncate #3 on 6400 points by 12 bits
HomBN #3 via element-wise mult on 6400 points
[31m2 ==> 1811329612[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #4 on 128 points by 12 bits
Time in sec for current matmul = 0.013
-160774758 => -5238369648
[31mMatMul Output Mismatch[0m
Relu #5 on 128 points, truncate=1 by 12 bits
Time in sec for current relu = 0.001
Truncate #5 on 6400 points by 12 bits
HomBN #4 via element-wise mult on 6400 points
[31m2 ==> -1342786996[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #6 on 128 points by 12 bits
Time in sec for current matmul = 0.014
-24298574 => -20034568448
[31mMatMul Output Mismatch[0m
Relu #7 on 128 points, truncate=1 by 12 bits
Time in sec for current relu = 0.001
Truncate #7 on 6400 points by 12 bits
HomBN #5 via element-wise mult on 6400 points
[31m2 ==> 51807433292[0m
[31mElemWiseSecretVectorMult Output Mismatch[0m
Truncate #8 on 128 points by 12 bits
Time in sec for current matmul = 0.013
-237782082 => 58354893138
[31mMatMul Output Mismatch[0m
Relu #9 on 128 points, truncate=1 by 12 bits
Time in sec for current relu = 0.001
Thread i = 0, total data sent till now = 4553429
Thread i = 1, total data sent till now = 2031475
Thread i = 2, total data sent till now = 1784899
Thread i = 3, total data sent till now = 2031475
------------------------------------------------------
------------------------------------------------------
------------------------------------------------------
Total time taken = 343312 microseconds.
Total data sent = 3.07542 MiB.
Number of rounds = 195
Total comm (sent+received) = (see SERVER OUTPUT)
------------------------------------------------------
Total time in Conv = 0 seconds.
Total time in MatMul = 0.069 seconds.
Total time in BatchNorm = 0.1 seconds.
Total time in Truncation = 0.141 seconds.
Total time in Relu = 0.012 seconds.
Total time in MaxPool = 0 seconds.
Total time in AvgPool = 0 seconds.
Total time in ArgMax = 0 seconds.
Total time in MatAdd = 0 seconds.
Total time in MatAddBroadCast = 0 seconds.
Total time in MulCir = 0 seconds.
Total time in ScalarMul = 0 seconds.
Total time in Sigmoid = 0 seconds.
Total time in Tanh = 0 seconds.
Total time in Sqrt = 0 seconds.
Total time in NormaliseL2 = 0 seconds.
------------------------------------------------------
Conv data sent = 0 MiB.
MatMul data sent = 0.595327 MiB.
BatchNorm data sent = 1.78605 MiB.
Truncation data sent = 0.675964 MiB.
Relu data sent = 0.0180817 MiB.
Maxpool data sent = 0 MiB.
Avgpool data sent = 0 MiB.
ArgMax data sent = 0 MiB.
MatAdd data sent = 0 MiB.
MatAddBroadCast data sent = 0 MiB.
MulCir data sent = 0 MiB.
Sigmoid data sent = 0 MiB.
Tanh data sent = 0 MiB.
Sqrt data sent = 0 MiB.
NormaliseL2 data sent = 0 MiB.
------------------------------------------------------
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246802
14246801
14246801
14246801
14246801
14246801
14246801
14246802
14246801
14246802
14246801
14246801
14246801
14246802
14246801
14246801
14246801
14246801
14246802
14246802
14246801
14246801
14246801
14246801
14246801
14246802
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246802
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246802
14246801
14246802
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246802
14246801
14246802
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246802
14246801
14246802
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246802
14246801
14246801
14246801
14246801
14246801
14246801
14246801
14246802
14246801
14246801
14246802
14246801
14246801
14246801
14246802
14246801
14246802
